#include "solvers/pl_eca_4.hpp"

#include "gurobi_c++.h"
#include "utils/print_solver_builder.hpp"
#include "utils/solver_builder.hpp"

namespace Solvers::PL_ECA_4_Vars {
    class PreprocessedDatas {
        public:
            std::vector<MutableLandscape::Node> target_nodes;
            MutableLandscape::Graph::NodeMap<ContractionResult> * contracted_instances;
            MutableLandscape::Graph::NodeMap<StaticLandscape::Graph::NodeMap<double>*> M_Maps_Map;

            PreprocessedDatas(const MutableLandscape & landscape, const RestorationPlan<MutableLandscape>& plan) : M_Maps_Map(landscape.getNetwork()) {
                const MutableLandscape::Graph & graph = landscape.getNetwork();
                // target_nodes
                for(MutableLandscape::NodeIt u(graph); u != lemon::INVALID; ++u) { 
                    if(landscape.getQuality(u) == 0 && !plan.contains(u)) continue;
                    target_nodes.push_back(u); 
                }
                // contracted_instances
                MyContractionAlgorithm alg2;
                contracted_instances = alg2.precompute(landscape, plan);
                // M_Maps_Map
                std::for_each(std::execution::par, target_nodes.begin(), target_nodes.end(), [&] (MutableLandscape::Node t) {
                    const ContractionResult & cr = (*contracted_instances)[t];
                    const StaticLandscape & contracted_landscape = *cr.landscape;
                    const StaticLandscape::Graph & contracted_graph = contracted_landscape.getNetwork();
                    const RestorationPlan<StaticLandscape>& contracted_plan = *cr.plan;

                    M_Maps_Map[t] = new StaticLandscape::Graph::NodeMap<double>(contracted_graph);
                    StaticLandscape::Graph::NodeMap<double> & M_Map = *M_Maps_Map[t];
                    for(StaticLandscape::NodeIt v(contracted_graph); v != lemon::INVALID; ++v)
                        M_Map[v] = max_flow_in(contracted_landscape, contracted_plan, v);
                });
            }
            ~PreprocessedDatas() {
                for(MutableLandscape::Node v : target_nodes) delete  M_Maps_Map[v];
                delete contracted_instances;
            }
    };


    struct XVar : public OSI_Builder::VarType {
        const ContractionResult & _cr;

        XVar(const ContractionResult & cr): VarType(lemon::countArcs(cr.landscape->getNetwork())), _cr(cr) {}
        int id(StaticLandscape::Arc a) const { 
            const int id = _cr.landscape->getNetwork().id(a);
            assert(id >=0 && id < _number); return _offset + id; 
        }
    };
    class FVar : public OSI_Builder::VarType {
        public:
            FVar(): VarType(1) {}
            int id() const { return _offset; }
    };
    class RestoredFVar : public OSI_Builder::VarType {
        private:
            std::vector<int> offsets;
        public:
            RestoredFVar(const ContractionResult & cr) : VarType(0) {
                offsets.resize(cr.plan->getNbOptions(), -1);
                for(auto const& [option, quality_gain] : cr.plan->getOptions(cr.t))
                    offsets[option] = _number++;
            }
            int id(RestorationPlan<MutableLandscape>::Option option) const {
                const int id = offsets.at(option);
                assert(id >=0 && id < _number); return _offset + id;
            }
    };
    class YVar : public OSI_Builder::VarType {
        public:
            YVar(const RestorationPlan<MutableLandscape>& plan): VarType(plan.getNbOptions(), 0, 1, true) {}
            int id(RestorationPlan<MutableLandscape>::Option option) const { 
                const int id = option;
                assert(id >=0 && id < _number); return _offset + id;
            }
    };

    class ContractedVars {
        public:
            XVar x;
            FVar f;
            RestoredFVar restored_f;
            ContractedVars(const ContractionResult & cr) : x(cr), f(), restored_f(cr) {};
    };

    class Variables {
        public:
            MutableLandscape::Graph::NodeMap<ContractedVars*> contracted;
            YVar y;
            const PreprocessedDatas & _pdatas;
            Variables(const MutableLandscape & landscape, const RestorationPlan<MutableLandscape>& plan, PreprocessedDatas & pdatas) :
                    contracted(landscape.getNetwork(), nullptr), y(plan), _pdatas(pdatas) {
                for(MutableLandscape::Node v : pdatas.target_nodes)
                    contracted[v] = new ContractedVars((*pdatas.contracted_instances)[v]);
            }
            ~Variables() {
                for(MutableLandscape::Node v : _pdatas.target_nodes) delete contracted[v];
            }
            ContractedVars & operator[](MutableLandscape::Node t) const { return *contracted[t]; }
    };

    void name_variables(OSI_Builder & solver, const MutableLandscape & landscape, const RestorationPlan<MutableLandscape>& plan, PreprocessedDatas & pdatas, const Variables & vars) {
        const MutableLandscape::Graph & graph = landscape.getNetwork();
        auto node_str = [&graph] (MutableLandscape::Node v) { return std::to_string(graph.id(v)); };
        // XVar
        for(MutableLandscape::Node t : pdatas.target_nodes) {
            const ContractedVars & cvars = vars[t];
            const ContractionResult & cr = (*pdatas.contracted_instances)[t];
            const StaticLandscape & contracted_landscape = *cr.landscape;
            const StaticLandscape::Graph & contracted_graph = contracted_landscape.getNetwork();
            // const RestorationPlan<StaticLandscape>& contracted_plan = *cr.plan;
            for(StaticLandscape::ArcIt a(contracted_graph); a != lemon::INVALID; ++a) {
                // solver->setColName(x_var->id(a), "x_t_" + node_str(t) + "_a_" + std::to_string(contracted_graph.id(a)));
                solver.setColName(cvars.x.id(a), "x_t_" + node_str(t) + "(" + std::to_string(contracted_graph.id(cr.t)) + ")_a_" + std::to_string(contracted_graph.id(a)) + "(" + std::to_string(contracted_graph.id(contracted_graph.source(a))) + ","+ std::to_string(contracted_graph.id(contracted_graph.target(a))) + ")" );
            }
        }
        // FVar
        for(MutableLandscape::Node t : pdatas.target_nodes) solver.setColName(vars[t].f.id(), "f_t_" + node_str(t));
        // RestoredFVar
        for(MutableLandscape::Node t : pdatas.target_nodes)
            for(auto const& [option, quality_gain] : plan.getOptions(t))
                solver.setColName(vars[t].restored_f.id(option), "restored_f_t_" + node_str(t) + "_" + std::to_string(option));
        // YVar
        for(RestorationPlan<MutableLandscape>::Option i=0; i<plan.getNbOptions(); ++i) solver.setColName(vars.y.id(i), "y_" + std::to_string(i));
    }
}

using namespace Solvers::PL_ECA_4_Vars;

void insert_variables(OSI_Builder & solver_builder, Variables & vars, PreprocessedDatas & pdatas) {
    for(MutableLandscape::Node t : pdatas.target_nodes) {
        solver_builder.addVarType(&vars[t].x);
        solver_builder.addVarType(&vars[t].f);
        solver_builder.addVarType(&vars[t].restored_f);
    }
    solver_builder.addVarType(&vars.y);
    solver_builder.init();
}

void fill_solver(OSI_Builder & solver_builder, std::vector<SolverBuilder_Utils::quadratic_ineq_constraint> & quad_constrs, const MutableLandscape & landscape, const RestorationPlan<MutableLandscape>& plan, const double B, 
        Variables & vars, PreprocessedDatas & pdatas) {
    ////////////////////////////////////////////////////////////////////////
    // Columns : Objective
    ////////////////////
    for(MutableLandscape::Node t : pdatas.target_nodes) {
        // sum w(t) * f_t
        const int f_t = vars[t].f.id();
        solver_builder.setObjective(f_t, landscape.getQuality(t));
        for(auto const& [option, quality_gain] : plan.getOptions(t)) {
            const int restored_f_t = vars[t].restored_f.id(option);
            solver_builder.setObjective(restored_f_t, quality_gain);
        }
    }
    ////////////////////////////////////////////////////////////////////////
    // Rows : Constraints
    ////////////////////
    for(MutableLandscape::Node t : pdatas.target_nodes) {
        const ContractedVars & cvars = vars[t];
        const int f_t = cvars.f.id();
        const ContractionResult & cr = (*pdatas.contracted_instances)[t];
        const StaticLandscape & contracted_landscape = *cr.landscape;
        const StaticLandscape::Graph & contracted_graph = contracted_landscape.getNetwork();
        const RestorationPlan<StaticLandscape>& contracted_plan = *cr.plan;
        // out_flow(u) <= in_flow(u) + w(u)
        for(StaticLandscape::NodeIt u(contracted_graph); u != lemon::INVALID; ++u) {
            SolverBuilder_Utils::quadratic_ineq_constraint_lhs_easy_init constraint_lhs;
            // out flow
            for(StaticLandscape::Graph::OutArcIt b(contracted_graph, u); b != lemon::INVALID; ++b)
                constraint_lhs(cvars.x.id(b));
            // optimisation variable
            if(u == cr.t) constraint_lhs(f_t);

            auto constraint_rhs = constraint_lhs.less();

            // in flow
            for(StaticLandscape::Graph::InArcIt a(contracted_graph, u); a != lemon::INVALID; ++a) {
                constraint_rhs(cvars.x.id(a), contracted_landscape.getProbability(a));
                for(auto const& [option, restored_probability] : contracted_plan.getOptions(a)) {
                    constraint_rhs(vars.y.id(option), cvars.x.id(a), 
                            restored_probability - contracted_landscape.getProbability(a));
                    break;
                }
            }
            // injected flow
            constraint_rhs(contracted_landscape.getQuality(u));
            for(auto const& [option, quality_gain] : contracted_plan.getOptions(u))
                constraint_rhs(vars.y.id(option), quality_gain);
                
            quad_constrs.push_back(constraint_rhs.take_data());
        }
    }
    // restored_f_t <= y_i * f_t
    for(RestorationPlan<MutableLandscape>::Option i=0; i<plan.getNbOptions(); ++i) {
        const int y_i = vars.y.id(i);
        for(auto const& [t, quality_gain] : plan.getNodes(i)) {
            const ContractedVars & cvars = vars[t];
            const int f_t = cvars.f.id();
            const int restored_f_t = cvars.restored_f.id(i);

            SolverBuilder_Utils::quadratic_ineq_constraint_lhs_easy_init constraint;
            quad_constrs.push_back(constraint(restored_f_t).less()(y_i, f_t).take_data());
        }
    }
    ////////////////////
    // sum y_i < B
    SolverBuilder_Utils::quadratic_ineq_constraint_lhs_easy_init budget_constraint_lhs;
    for(RestorationPlan<MutableLandscape>::Option i=0; i<plan.getNbOptions(); ++i) {
        budget_constraint_lhs(vars.y.id(i), plan.getCost(i));
    }
    quad_constrs.push_back(budget_constraint_lhs.less()(B).take_data());
}

Solution Solvers::PL_ECA_4::solve(const MutableLandscape & landscape, const RestorationPlan<MutableLandscape>& plan, const double B) const {
    Solution solution(landscape, plan);
    const int log_level = params.at("log")->getInt();
    const int timeout = params.at("timeout")->getInt(); (void)timeout; // pas bien
    const bool relaxed = params.at("relaxed")->getBool();
    Chrono chrono;
    if(log_level > 0) std::cout << name() << ": Start preprocessing" << std::endl;
    PreprocessedDatas preprocessed_datas(landscape, plan);
    OSI_Builder solver_builder = OSI_Builder();
    Variables vars(landscape, plan, preprocessed_datas);
    insert_variables(solver_builder, vars, preprocessed_datas);
    if(log_level > 0) {
        std::cout << name() << ": Complete preprocessing : " << chrono.lapTimeMs() << " ms" << std::endl;
        std::cout << name() << ": Start filling solver : " << solver_builder.getNbVars() << " variables" << std::endl;
    }
    std::vector<SolverBuilder_Utils::quadratic_ineq_constraint> quad_constrs;
    fill_solver(solver_builder, quad_constrs, landscape, plan, B, vars, preprocessed_datas);

    const int nb_vars = solver_builder.getNbVars();
    double * objective = solver_builder.getObjective();
    double * col_lb = solver_builder.getColLB();
    double * col_ub = solver_builder.getColUB();
    char * vtype = new char[nb_vars];
    for(OSI_Builder::VarType * varType : solver_builder.getVarTypes()) {
        const int offset = varType->getOffset();
        const int last_id = varType->getOffset() + varType->getNumber() - 1; 
        for(int i=offset; i<=last_id; i++) {
            vtype[i] = (!relaxed && varType->isInteger() ? GRB_BINARY : GRB_CONTINUOUS);
        }
    }

    CoinPackedMatrix * matrix = solver_builder.getMatrix();
    const int nb_rows = matrix->getNumRows();
    const int nb_elems = matrix->getNumElements();
    int * begins = new int[nb_elems]; std::copy(matrix->getVectorStarts(), matrix->getVectorStarts()+nb_elems, begins);
    int * indices = new int[nb_elems]; std::copy(matrix->getIndices(), matrix->getIndices()+nb_elems, indices);
    double * elements = new double[nb_elems]; std::copy(matrix->getElements(), matrix->getElements()+nb_elems, elements);
    double * row_lb = solver_builder.getRowLB();
    double * row_ub = solver_builder.getRowUB();

    GRBenv   *env   = NULL;
    GRBmodel *model = NULL;
    GRBemptyenv(&env);
    GRBstartenv(env);
    ////////////////////
    GRBsetdblparam(env, GRB_DBL_PAR_MIPGAP, 1e-8);
    GRBsetintparam(env, GRB_INT_PAR_LOGTOCONSOLE, (log_level >= 2 ? 1 : 0));
    GRBsetdblparam(env, GRB_DBL_PAR_TIMELIMIT, timeout);
    ////////////////////
    GRBsetintparam(env, GRB_INT_PAR_NONCONVEX, 1);
    ////////////////////
    GRBnewmodel(env, &model, "pl_eca_4", 0, NULL, NULL, NULL, NULL, NULL);
    GRBaddvars(model, nb_vars, 0, NULL, NULL, NULL, objective, col_lb, col_ub, vtype, NULL);
    GRBaddrangeconstrs(model, nb_rows, nb_elems, begins, indices, elements, row_lb, row_ub, NULL);
    ////////////////////
    GRBsetintattr(model, GRB_INT_ATTR_MODELSENSE, GRB_MAXIMIZE);

    std::cout << "quad constraints: " << quad_constrs.size() << std::endl;

    for(auto & expr : quad_constrs) {
        auto & quad = expr.quadratic_expression;

        if(!quad.isLinear()) {
            SolverBuilder_Utils::operator<<(std::cout, expr) << std::endl;

            GRBaddqconstr(model,
                    quad.getNbLinearTerms(),
                    quad.getLinearIndicesData(),
                    quad.getLinearCoefficientsData(), 
                    quad.getNbQuadTerms(), 
                    quad.getQuadIndices1Data(), 
                    quad.getQuadIndices2Data(),
                    quad.getQuadCoefficientsData(),
                    (expr.sense == SolverBuilder_Utils::LESS ? GRB_LESS_EQUAL : GRB_GREATER_EQUAL),
                    -quad.getConstant(), NULL);
        } else {
            GRBaddconstr(model,
                    quad.getNbLinearTerms(),
                    quad.getLinearIndicesData(),
                    quad.getLinearCoefficientsData(),
                    (expr.sense == SolverBuilder_Utils::LESS ? GRB_LESS_EQUAL : GRB_GREATER_EQUAL),
                    -quad.getConstant(), NULL);
        }
    }



    if(log_level >= 1) {
        if(log_level >= 3) {
            name_variables(solver_builder, landscape, plan, preprocessed_datas, vars);
            OsiClpSolverInterface * solver_clp = solver_builder.buildSolver<OsiClpSolverInterface>(OSI_Builder::MAX);
            solver_clp->writeLp("pl_eca_3");
            delete solver_clp;
            std::cout << name() << ": LP printed to 'pl_eca_3.lp'" << std::endl;
        }
        std::cout << name() << ": Complete filling solver : " << solver_builder.getNbConstraints() << " constraints and "<< solver_builder.getNbElems() << " entries in " << chrono.lapTimeMs() << " ms" << std::endl;
        std::cout << name() << ": Start solving" << std::endl;
    }


    std::cout << "optimize returned: " << GRBoptimize(model) << std::endl;
    ////////////////////
    int status;
    GRBgetintattr(model, GRB_INT_ATTR_STATUS, &status);
    std::cout << "status = " << status << std::endl;
    if(status == GRB_INF_OR_UNBD) {
        std::cout << "Model is infeasible or unbounded" << std::endl;
    } else if(status != GRB_OPTIMAL) {
        std::cout << "Optimization was stopped early" << std::endl;
    }
    double obj;
    GRBgetdblattr(model, GRB_DBL_ATTR_OBJVAL, &obj);
    double * var_solution = new double[nb_vars];
    GRBgetdblattrarray(model, GRB_DBL_ATTR_X, 0, nb_vars, var_solution);
    if(var_solution == nullptr) {
        std::cerr << name() << ": Fail" << std::endl;
        assert(false);
    }
    for(RestorationPlan<MutableLandscape>::Option i=0; i<plan.getNbOptions(); ++i) {
        const int y_i = vars.y.id(i);
        double value = var_solution[y_i];
        solution.set(i, value);
    }
    solution.setComputeTimeMs(chrono.timeMs());
    solution.obj = obj;
    solution.nb_vars = solver_builder.getNbNonZeroVars();
    solution.nb_constraints = solver_builder.getNbConstraints();
    solution.nb_elems = nb_elems;
    if(log_level >= 1) {
        std::cout << name() << ": Complete solving : " << solution.getComputeTimeMs() << " ms" << std::endl;
        std::cout << name() << ": ECA from obj : " << std::sqrt(solution.obj) << std::endl;
    }    
    
    GRBfreemodel(model);
    GRBfreeenv(env);

    delete[] vtype;
    delete[] begins;
    delete[] indices;
    delete[] elements;
    delete[] var_solution;

    return solution;
}

double Solvers::PL_ECA_4::eval(const MutableLandscape & landscape, const RestorationPlan<MutableLandscape>& plan, const double B, const Solution & solution) const {
    const int log_level = params.at("log")->getInt();
    Chrono chrono;
    PreprocessedDatas preprocessed_datas(landscape, plan);
    OSI_Builder solver_builder = OSI_Builder();
    Variables vars(landscape, plan, preprocessed_datas);
    insert_variables(solver_builder, vars, preprocessed_datas);
    std::vector<SolverBuilder_Utils::quadratic_ineq_constraint> quad_constrs;
    fill_solver(solver_builder, quad_constrs, landscape, plan, B, vars, preprocessed_datas);
    for(RestorationPlan<MutableLandscape>::Option i=0; i<plan.getNbOptions(); ++i) {
        const int y_i = vars.y.id(i);
        double y_i_value = solution[i];
        solver_builder.setBounds(y_i, y_i_value, y_i_value);
    }
    OsiSolverInterface * solver = solver_builder.buildSolver<OsiClpSolverInterface>(OSI_Builder::MAX);
    ////////////////////
    solver->initialSolve();  
    //////////////////// 
    const double * var_solution = solver->getColSolution();
    if(var_solution == nullptr) {
        std::cerr << name() << ": Fail" << std::endl;
        delete solver;
        return 0.0;
    }
    double obj = solver->getObjValue();
    if(log_level >= 1) std::cout << name() << ": eval : " << obj << std::endl;
    delete solver;
    return obj;
}