#include "precomputation/my_contraction_algorithm.hpp"

MutableLandscape::Graph::NodeMap<ContractionResult> * MyContractionAlgorithm::precompute(
                const MutableLandscape & landscape, 
                const RestorationPlan<MutableLandscape> & plan, 
                const std::vector<MutableLandscape::Node> & target_nodes) const {
    using Graph = MutableLandscape::Graph;
    using ProbabilityMap = MutableLandscape::ProbabilityMap;

    const Graph & graph = landscape.getNetwork();
    Graph::NodeMap<ContractionResult> * results = new Graph::NodeMap<ContractionResult>(graph);

    const ProbabilityMap & p_min = landscape.getProbabilityMap();
    ProbabilityMap p_max(graph);
    for(Graph::ArcIt a(graph); a != lemon::INVALID; ++a) {
        p_max[a] = p_min[a];
        for(const auto & e : plan[a])
            p_max[a] = std::max(p_max[a], e.restored_probability);
    }

    // TODO use graph iterator
    std::vector<Graph::Arc> arcs;
    for(Graph::ArcIt b(graph); b != lemon::INVALID; ++b) arcs.push_back(b);

    Graph::ArcMap<std::vector<Graph::Node>> strong_nodes(graph);
    Graph::ArcMap<std::vector<Graph::Node>> non_weak_nodes(graph);


    Graph::NodeMap<tbb::concurrent_vector<Graph::Arc>> contractables_arcs(graph);
    Graph::NodeMap<tbb::concurrent_vector<Graph::Arc>> deletables_arcs(graph);

    std::for_each(std::execution::par_unseq, arcs.begin(), arcs.end(), [&] (Graph::Arc a) {
        lemon::MultiplicativeIdentifyStrong<Graph, ProbabilityMap> identifyStrong(graph, p_min, p_max);
        lemon::MultiplicativeIdentifyUseless<Graph, ProbabilityMap> identifyUseless(graph, p_min, p_max);
        identifyStrong.run(a);
        identifyUseless.run(a);

        for(Graph::Node u : identifyStrong.getLabeledNodesList())
            contractables_arcs[u].push_back(a);
        for(Graph::Node u : identifyUseless.getLabeledNodesList())
            deletables_arcs[u].push_back(a);
    });

    // transpose
    // Graph::NodeMap<std::vector<Graph::Arc>> contractables_arcs(graph);
    // Graph::NodeMap<std::vector<Graph::Arc>> deletables_arcs(graph);
    // for(Graph::ArcIt a(graph); a != lemon::INVALID; ++a) {
    //     for(Graph::Node u : strong_nodes[a])
    //         contractables_arcs[u].push_back(a);
    //     for(Graph::Node u : non_weak_nodes[a])
    //         deletables_arcs[u].push_back(a);
    // }
    // parallel transpose
    // Graph::NodeMap<tbb::concurrent_vector<Graph::Arc>> contractables_arcs(graph);
    // Graph::NodeMap<tbb::concurrent_vector<Graph::Arc>> deletables_arcs(graph);
    // std::for_each(std::execution::par_unseq, arcs.begin(), arcs.end(), [&] (Graph::Arc a) { 
    //     for(Graph::Node u : strong_nodes[a])
    //         contractables_arcs[u].push_back(a);
    //     for(Graph::Node u : non_weak_nodes[a])
    //         deletables_arcs[u].push_back(a);
    // });

    std::for_each(std::execution::par_unseq, target_nodes.begin(), target_nodes.end(), [&] (Graph::Node u) {
        (*results)[u] = contract(landscape, plan, u, contractables_arcs[u], deletables_arcs[u]);
    });
    return results;
}

MutableLandscape::Graph::NodeMap<ContractionResult> * MyContractionAlgorithm::precompute(
                const MutableLandscape & landscape, 
                const RestorationPlan<MutableLandscape> & plan) const {
    const MutableLandscape::Graph & graph = landscape.getNetwork();
    std::vector<MutableLandscape::Node> nodes;
    for(MutableLandscape::NodeIt u(graph); u != lemon::INVALID; ++u)
        nodes.push_back(u);
    return precompute(landscape, plan, nodes);
}



tbb::concurrent_queue<Graph::Arc> arcs;
    for(Graph::ArcIt b(graph); b != lemon::INVALID; ++b)
        arcs.push(b);

    Graph::NodeMap<tbb::concurrent_vector<Graph::Arc>> contractables_arcs(graph);
    Graph::NodeMap<tbb::concurrent_vector<Graph::Arc>> deletables_arcs(graph);

    std::vector<int> threads(std::thread::hardware_concurrency());

    std::for_each(std::execution::par_unseq, threads.begin(), threads.end(), [&] (int) {
        std::vector<Graph::Node> strong_nodes;
        std::vector<Graph::Node> non_weak_nodes;
        lemon::MultiplicativeIdentifyStrong<Graph, ProbabilityMap> identifyStrong(graph, p_min, p_max);
        lemon::MultiplicativeIdentifyUseless<Graph, ProbabilityMap> identifyUseless(graph, p_min, p_max);
        identifyStrong.labeledNodesList(strong_nodes);
        identifyUseless.labeledNodesList(non_weak_nodes);

        Graph::Arc a;
        while(!arcs.empty()) {
            if(!arcs.try_pop(a))
                continue;

            identifyStrong.run(a);
            identifyUseless.run(a);

            for(Graph::Node u : strong_nodes)
                contractables_arcs[u].push_back(a);
            for(Graph::Node u : non_weak_nodes)
                deletables_arcs[u].push_back(a);

            strong_nodes.clear();
            non_weak_nodes.clear();
        }
    });

    std::for_each(std::execution::par_unseq, target_nodes.begin(), target_nodes.end(), [&] (Graph::Node u) {
        (*results)[u] = contract(landscape, plan, u, contractables_arcs[u], deletables_arcs[u]);
    });







    // std::vector<std::thread> threads;
    // for(std::size_t i=0; i<std::thread::hardware_concurrency(); ++i) {
    //     threads.emplace_back([&](void) {
    //         std::vector<Graph::Node> strong_nodes;
    //         std::vector<Graph::Node> non_weak_nodes;
    //         lemon::MultiplicativeIdentifyStrong<Graph, ProbabilityMap> identifyStrong(graph, p_min, p_max);
    //         lemon::MultiplicativeIdentifyUseless<Graph, ProbabilityMap> identifyUseless(graph, p_min, p_max);
    //         identifyStrong.labeledNodesList(strong_nodes);
    //         identifyUseless.labeledNodesList(non_weak_nodes);

    //         for(std::size_t local_cpt{}; (local_cpt=cpt_arc.fetch_add(1, std::memory_order_relaxed)) < arcs.size();) {
    //             Graph::Arc a = arcs[local_cpt];
    //             identifyStrong.run(a);
    //             identifyUseless.run(a);
    //             for(Graph::Node u : strong_nodes) {
    //                 if(!node_filter[u]) continue;
    //                 contractables_arcs[u].push_back(a);
    //             }
    //             for(Graph::Node u : non_weak_nodes) {
    //                 if(!node_filter[u]) continue;
    //                 deletables_arcs[u].push_back(a);
    //             }
    //             strong_nodes.clear();
    //             non_weak_nodes.clear();
    //         }
    //     });
    // }
    // for(auto & thread : threads) thread.join();










    std::vector<int> threads(std::thread::hardware_concurrency());
    std::cout << "threads: " << std::thread::hardware_concurrency() << std::endl;
    std::for_each(std::execution::par_unseq, threads.begin(), threads.end(), [&] (int) {
        std::vector<Graph::Node> strong_nodes;
        std::vector<Graph::Node> non_weak_nodes;
        lemon::MultiplicativeIdentifyStrong<Graph, ProbabilityMap> identifyStrong(graph, p_min, p_max);
        lemon::MultiplicativeIdentifyUseless<Graph, ProbabilityMap> identifyUseless(graph, p_min, p_max);
        identifyStrong.labeledNodesList(strong_nodes);
        identifyUseless.labeledNodesList(non_weak_nodes);

        for(std::size_t local_cpt{}; (local_cpt=cpt_arc.fetch_add(1, std::memory_order_relaxed)) < arcs.size();) {
            Graph::Arc a = arcs[local_cpt];

            identifyStrong.run(a);
            identifyUseless.run(a);

            for(Graph::Node u : strong_nodes) {
                if(!node_filter[u]) continue;
                contractables_arcs[u].push_back(a);
            }
            for(Graph::Node u : non_weak_nodes) {
                if(!node_filter[u]) continue;
                deletables_arcs[u].push_back(a);
            }

            strong_nodes.clear();
            non_weak_nodes.clear();
        }
    });